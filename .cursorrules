You are an expert in TypeScript, Node.js, Next.js 15 App Router, React 19, Typescript, Shadcn UI, and Tailwind CSS.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC) .
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use Webp format, include size data, implement lazy loading.
- DO NOT USE API ROUTES, we are in NEXTJS 15. Always use server components if possible.

Key Conventions
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
- Favor server components and Next.js SSR.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.
- Use the src/app directory for routing and server components.
- Use the src/components directory for reusable components, styling, interactivity, and layout.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

The Following is a next.js 15 project, react 19, typescript, shadcn ui, tailwind css project. It is an ai resume builder. 
It is called "ResumeLM".


Database Structure
- Tables follow a relational structure with UUID primary keys and timestamps.

Tables:
1. profiles
   - Stores user's base information and resume components
   - Contains JSON fields for complex data (work_experience, education, skills, etc.)
   - One-to-one relationship with auth.users

2. jobs
   - Stores job listings with requirements and details
   - Public read access, user-specific write access
   - Contains salary_range as JSONB for flexible structure
   - Tracks application status and requirements

3. resumes
   - Stores both base and tailored resumes
   - Links to jobs table for tailored resumes
   - Contains same fields as profiles for resume content
   - Uses JSONB for section_order and section_configs
   - section_configs controls visibility and display of resume sections

Key Relationships:
- profiles.user_id → auth.users.id
- resumes.user_id → auth.users.id
- resumes.job_id → jobs.id (optional, for tailored resumes)

JSON Fields Structure:
- work_experience: Array of work history with descriptions and technologies
- education: Array of educational background with achievements
- skills: Array of skill categories with grouped items
- projects: Array of projects with highlights and technologies
- certifications: Array of professional certifications
- section_configs: Object controlling section display properties

Row Level Security (RLS):
- profiles: User can only access own profile
- jobs: Public read, user-specific write
- resumes: User can only access own resumes

Design System: Soft Gradient Minimalism

Core Principles:
- Layered Depth: Multiple translucent layers create visual hierarchy
- Organic Motion: Subtle animations suggest liveliness without distraction
- Purposeful White Space: Generous spacing improves content digestion
- Consistent Interaction: Predictable hover and active states across components

Visual Hierarchy:
1. Background Layer
   - Base: Neutral gradient (rose-50/50 → sky-50/50 → violet-50/50)
   - Floating Orbs: Translucent gradients with slow animations
   - Mesh Overlay: Subtle grid pattern (#8882)

2. Content Layer
   - Glass Cards: bg-white/40 with backdrop-blur-md
   - Border: border-white/40
   - Shadow: shadow-xl with backdrop-blur-xl

3. Interactive Elements
   - Hover State: Duration 500ms
   - Transform: -translate-y-1
   - Background Shift: bg-white/50

Color Palette:
Primary:
  - Teal: from-teal-600 to-cyan-600
  - Purple: from-purple-600 to-indigo-600 (Base Resumes)
    - Accent: {
      bg: "purple-50",
      border: "purple-200",
      hover: "purple-300",
      text: "purple-600"
    }
  - Pink: from-pink-600 to-rose-600 (Tailored Resumes)
    - Accent: {
      bg: "pink-50",
      border: "pink-200",
      hover: "pink-300",
      text: "pink-600"
    }

Background:
  - Gradients: pink-200/20, violet-200/20, blue-200/20, teal-200/20
  - Overlays: teal-50/10, cyan-50/10, purple-50/10, indigo-50/10

Specific Resume Type Colors:
- Base Resumes:
  - Gradient: from-purple-600 to-indigo-600
  - Icon Background: from-purple-600/10 to-indigo-600/10
  - Border: border-purple-600/10
  - Text: text-purple-600
  - Hover States: purple-700

- Tailored Resumes:
  - Gradient: from-pink-600 to-rose-600
  - Icon Background: from-pink-600/10 to-rose-600/10
  - Border: border-pink-600/10
  - Text: text-pink-600
  - Hover States: pink-700

Typography:
- Headers: text-3xl, font-semibold with gradient text
- Body: Base 16px, text-muted-foreground for secondary text
- Font Stack: 'Inter', system-ui, -apple-system, sans-serif

Animation Timings:
- Hover Transitions: 500ms
- Background Orbs: 8s/9s ease-in-out infinite
- Transform Origin: Center

Component Patterns:
- Card Structure: rounded-2xl with nested content padding
- Content Areas: Relative positioning with gradient overlays
- Interactive Areas: Clear hover states with smooth transitions

Responsive Behavior:
- Mobile First: Base layout with single column
- Breakpoints: md:p-8 lg:p-10 lg:grid-cols-12
- Max Width: 2000px with centered content

Z-Index Layers:
- Background: z-0
- Content: z-10
- Overlays: Relative to parent

API Keys & Vault Security System

Database Structure:
- api_keys table with encrypted storage using Supabase Vault
- Separate from profiles for security isolation
- One-to-many relationship with users

Table Schema:
api_keys (
  id: uuid primary key,
  user_id: uuid references auth.users & profiles,
  service_name: text,
  encrypted_key: text (vault-encrypted),
  is_active: boolean,
  last_used_at: timestamp with time zone,
  expires_at: timestamp with time zone,
  created_at/updated_at: timestamps
)

Security Features:
1. Encryption
   - Uses Supabase Vault TDE (Transparent Data Encryption)
   - Server-side encryption/decryption only
   - Automatic master key management by Supabase

2. Access Control
   - Row Level Security (RLS) enabled
   - User-specific access policies
   - Separate read/write/delete policies

3. Key Management Functions:
   store_api_key(service_name, api_key, expires_at)
   - Encrypts and stores new key
   - Deactivates previous active keys
   - Returns: uuid of new key

   get_api_key(service_name)
   - Retrieves and decrypts active key
   - Updates last_used_at timestamp
   - Returns: decrypted key string

   deactivate_api_key(service_name)
   - Deactivates specific service key
   - Returns: boolean success

Performance Optimizations:
- Composite index on (user_id, service_name) where is_active = true
- Automatic timestamp updates via trigger
- Cascade deletion with profiles

Usage Patterns:
1. Storage:
   - Always use store_api_key() function
   - Never store raw keys directly
   - Set expiration when applicable

2. Retrieval:
   - Always use get_api_key() function
   - Only retrieve in server components
   - Never expose keys to client

3. Security Best Practices:
   - Rotate keys regularly
   - Monitor last_used_at for suspicious activity
   - Maintain single active key per service
   - Use server components exclusively for key operations

Implementation Notes:
- All key operations must be performed server-side
- Never expose encrypted or decrypted keys in client code
- Use try-catch blocks for key operations
- Implement key rotation policies
- Monitor key usage patterns


AI Providers & Models
- Using Supabase Vault for secure API key storage
- Support for multiple AI providers through service_name enum:
  - OpenAI (@ai-sdk/openai)
  - Azure OpenAI (@ai-sdk/azure)
  - Anthropic (@ai-sdk/anthropic)
  - Amazon Bedrock (@ai-sdk/amazon-bedrock)
  - Google Generative AI (@ai-sdk/google)
  - Google Vertex (@ai-sdk/google-vertex)
  - Mistral (@ai-sdk/mistral)
  - xAI Grok (@ai-sdk/xai)
  - Together.ai (@ai-sdk/togetherai)
  - Cohere (@ai-sdk/cohere)
  - Fireworks (@ai-sdk/fireworks)
  - DeepInfra (@ai-sdk/deepinfra)
  - Groq (@ai-sdk/groq)


  sql
    check (service_name in (
    'openai',
    'azure',
    'anthropic',
    'bedrock',
    'google',
    'vertex',
    'mistral',
    'xai',
    'together',
    'cohere',
    'fireworks',
    'deepinfra',
    'groq'
    ));


  Key Management:
- One active key per service per user
- Keys stored encrypted in Vault
- Service-specific validation and formatting
- Server-side only operations